const router = require("express").Router();
const jwt = require("jsonwebtoken");
const Appointment = require("../models/Appointment");
const { createAppointmentAuth } = require("../controllers/appointmentController");
const axios = require("axios");

// Middleware x√°c th·ª±c
const auth = (req, res, next) => {
  const authHeader = req.headers["authorization"];
  if (!authHeader) return res.status(401).json({ error: "Thi·∫øu token" });
  try {
    const token = authHeader.split(" ")[1];
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch {
    return res.status(401).json({ error: "Token kh√¥ng h·ª£p l·ªá" });
  }
};

// H√†m g·ªçi webhook n8n v·ªõi URL ngrok m·ªõi
async function notifyN8nBooking(appointment) {
  try {
    const webhookUrl =
      " https://ee7f-1-55-233-84.ngrok-free.app/webhook-test/aff006b1-d495-4d97-a8d8-085d97bf5bbd";

    const payload = {
      id: appointment._id,
      name: appointment.name,
      email: appointment.email,
      phone: appointment.phone,
      date: appointment.date,
      time: appointment.time,
      service: appointment.service,
      stylist: appointment.stylist || "",
      note: appointment.note || "",
      status: appointment.status,
    };

    const response = await axios.post(webhookUrl, payload);
    console.log("‚úÖ G·ª≠i d·ªØ li·ªáu booking ƒë·∫øn n8n th√†nh c√¥ng:", response.status);
  } catch (error) {
    console.error("‚ùå L·ªói khi g·ª≠i webhook ƒë·∫øn n8n:", error.message);
  }
}

// Route x√°c nh·∫≠n l·ªãch h·∫πn (GET)
router.get("/confirm", async (req, res) => {
  console.log("Request ƒë·∫øn GET /confirm v·ªõi appointmentId:", req.query.appointmentId);
  const { appointmentId } = req.query;
  if (!appointmentId) return res.status(400).send("Thi·∫øu ID l·ªãch h·∫πn.");

  try {
    const appointment = await Appointment.findById(appointmentId);
    if (!appointment) return res.status(404).send("L·ªãch h·∫πn kh√¥ng t·ªìn t·∫°i.");

    if (appointment.status === "confirmed") {
      return res.send("L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n tr∆∞·ªõc ƒë√≥.");
    }
    if (appointment.status === "cancelled") {
      return res.send("L·ªãch h·∫πn ƒë√£ b·ªã h·ªßy, kh√¥ng th·ªÉ x√°c nh·∫≠n.");
    }

    appointment.status = "confirmed";
    await appointment.save();

    await notifyN8nBooking(appointment);

    return res.send("C·∫£m ∆°n b·∫°n ƒë√£ x√°c nh·∫≠n l·ªãch h·∫πn.");
  } catch (err) {
    console.error(err);
    return res.status(500).send("L·ªói server.");
  }
});

// Route x√°c nh·∫≠n l·ªãch h·∫πn (POST) ‚Äî ƒë·ªÉ n8n g·ªçi webhook d·∫°ng POST
router.post("/confirm", async (req, res) => {
  console.log("Request ƒë·∫øn POST /confirm v·ªõi appointmentId:", req.body.appointmentId);
  const { appointmentId } = req.body;
  if (!appointmentId) return res.status(400).send("Thi·∫øu ID l·ªãch h·∫πn.");

  try {
    const appointment = await Appointment.findById(appointmentId);
    if (!appointment) return res.status(404).send("L·ªãch h·∫πn kh√¥ng t·ªìn t·∫°i.");

    if (appointment.status === "confirmed") {
      return res.send("L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n tr∆∞·ªõc ƒë√≥.");
    }
    if (appointment.status === "cancelled") {
      return res.send("L·ªãch h·∫πn ƒë√£ b·ªã h·ªßy, kh√¥ng th·ªÉ x√°c nh·∫≠n.");
    }

    appointment.status = "confirmed";
    await appointment.save();

    await notifyN8nBooking(appointment);

    return res.send("C·∫£m ∆°n b·∫°n ƒë√£ x√°c nh·∫≠n l·ªãch h·∫πn.");
  } catch (err) {
    console.error(err);
    return res.status(500).send("L·ªói server.");
  }
});

// Route h·ªßy l·ªãch h·∫πn (GET)
router.get("/cancel", async (req, res) => {
  console.log("Request ƒë·∫øn GET /cancel v·ªõi appointmentId:", req.query.appointmentId);
  const { appointmentId } = req.query;
  if (!appointmentId) return res.status(400).send("Thi·∫øu ID l·ªãch h·∫πn.");

  try {
    const appointment = await Appointment.findById(appointmentId);
    if (!appointment) return res.status(404).send("L·ªãch h·∫πn kh√¥ng t·ªìn t·∫°i.");

    if (appointment.status === "cancelled") {
      return res.send("L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c h·ªßy tr∆∞·ªõc ƒë√≥.");
    }

    appointment.status = "cancelled";
    await appointment.save();

    await notifyN8nBooking(appointment);

    return res.send("B·∫°n ƒë√£ h·ªßy l·ªãch h·∫πn th√†nh c√¥ng.");
  } catch (err) {
    console.error(err);
    return res.status(500).send("L·ªói server.");
  }
});

// Route h·ªßy l·ªãch h·∫πn (POST) ‚Äî ƒë·ªÉ n8n g·ªçi webhook d·∫°ng POST
router.post("/cancel", async (req, res) => {
  console.log("Request ƒë·∫øn POST /cancel v·ªõi appointmentId:", req.body.appointmentId);
  const { appointmentId } = req.body;
  if (!appointmentId) return res.status(400).send("Thi·∫øu ID l·ªãch h·∫πn.");

  try {
    const appointment = await Appointment.findById(appointmentId);
    if (!appointment) return res.status(404).send("L·ªãch h·∫πn kh√¥ng t·ªìn t·∫°i.");

    if (appointment.status === "cancelled") {
      return res.send("L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c h·ªßy tr∆∞·ªõc ƒë√≥.");
    }

    appointment.status = "cancelled";
    await appointment.save();

    await notifyN8nBooking(appointment);

    return res.send("B·∫°n ƒë√£ h·ªßy l·ªãch h·∫πn th√†nh c√¥ng.");
  } catch (err) {
    console.error(err);
    return res.status(500).send("L·ªói server.");
  }
});

// üìå Public: ƒê·∫∑t l·ªãch kh√¥ng c·∫ßn ƒëƒÉng nh·∫≠p
router.post("/", async (req, res) => {
  try {
    const { name, email, phone, date, time, service, stylist, note } = req.body;

    if (!name || !email || !phone || !date || !time || !service) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin ƒë·∫∑t l·ªãch." });
    }

    const appointmentDate = new Date(`${date}T${time}`);
    const now = new Date();

    if (appointmentDate <= now) {
      return res.status(400).json({
        message: "Th·ªùi gian ƒë·∫∑t l·ªãch ph·∫£i sau th·ªùi gian hi·ªán t·∫°i.",
      });
    }

    const [hour] = time.split(":").map(Number);
    if (hour < 8 || hour > 20) {
      return res.status(400).json({
        message: "Th·ªùi gian kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn trong kho·∫£ng 8:00 - 20:00.",
      });
    }

    const existing = await Appointment.findOne({ email, date: appointmentDate });
    if (existing) {
      return res.status(409).json({
        message: "B·∫°n ƒë√£ ƒë·∫∑t l·ªãch v√†o th·ªùi gian n√†y. Vui l√≤ng ch·ªçn th·ªùi gian kh√°c.",
      });
    }

    const appointment = new Appointment({
      userId: null,
      name,
      email,
      phone,
      date: appointmentDate,
      service,
      stylist,
      note,
      status: "pending",
    });

    await appointment.save();

    // G·ªçi webhook n8n sau khi l∆∞u th√†nh c√¥ng
    await notifyN8nBooking(appointment);

    res.status(201).json({ message: "ƒê·∫∑t l·ªãch th√†nh c√¥ng!", appointment });
  } catch (error) {
    console.error("‚ùå L·ªói ƒë·∫∑t l·ªãch:", error);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß.", error: error.message });
  }
});

// Route l·∫•y l·ªãch s·ª≠
router.get("/history", async (req, res) => {
  const { query } = req.query;
  if (!query) {
    return res.status(400).json({ message: "Thi·∫øu s·ªë ƒëi·ªán tho·∫°i ho·∫∑c email." });
  }

  try {
    const appointments = await Appointment.find({
      $or: [{ phone: query }, { email: query }],
    }).sort({ date: -1 });

    res.json(appointments);
  } catch (err) {
    console.error("‚ùå L·ªói truy v·∫•n l·ªãch s·ª≠:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß.", error: err.message });
  }
});

// Route t·∫°o l·ªãch h·∫πn cho user ƒë√£ x√°c th·ª±c
router.post("/auth", auth, createAppointmentAuth);

// Route l·∫•y danh s√°ch l·ªãch h·∫πn c·ªßa user ƒë√£ x√°c th·ª±c
router.get("/", auth, async (req, res) => {
  try {
    const appointments = await Appointment.find({ userId: req.user.id });
    res.json(appointments);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Route l·∫•y to√†n b·ªô l·ªãch h·∫πn (admin)
router.get("/all", auth, async (req, res) => {
  if (req.user.role !== "admin")
    return res.status(403).json({ error: "Kh√¥ng c√≥ quy·ªÅn" });
  try {
    const appointments = await Appointment.find().populate("userId", "name email");
    res.json(appointments);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;
